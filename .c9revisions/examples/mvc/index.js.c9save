{"ts":1368755073510,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var express = require('../..');\n\nvar app = module.exports = express();\n\n// settings\n\n// map .renderFile to \".html\" files\napp.engine('html', require('ejs').renderFile);\n\n// make \".html\" the default\napp.set('view engine', 'html');\n\n// set views for error and 404 pages\napp.set('views', __dirname + '/views');\n\n// define a custom res.message() method\n// which stores messages in the session\napp.response.message = function(msg){\n  // reference `req.session` via the `this.req` reference\n  var sess = this.req.session;\n  // simply add the msg to an array for later\n  sess.messages = sess.messages || [];\n  sess.messages.push(msg);\n  return this;\n};\n\n// log\nif (!module.parent) app.use(express.logger('dev'));\n\n// serve static files\napp.use(express.static(__dirname + '/public'));\n\n// session support\napp.use(express.cookieParser('some secret here'));\napp.use(express.session());\n\n// parse request bodies (req.body)\napp.use(express.bodyParser());\n\n// support _method (PUT in forms etc)\napp.use(express.methodOverride());\n\n// expose the \"messages\" local variable when views are rendered\napp.use(function(req, res, next){\n  var msgs = req.session.messages || [];\n\n  // expose \"messages\" local variable\n  res.locals.messages = msgs;\n\n  // expose \"hasMessages\"\n  res.locals.hasMessages = !! msgs.length;\n\n  /* This is equivalent:\n   res.locals({\n     messages: msgs,\n     hasMessages: !! msgs.length\n   });\n  */\n\n  next();\n  // empty or \"flush\" the messages so they\n  // don't build up\n  req.session.messages = [];\n});\n\n// load controllers\nrequire('./lib/boot')(app, { verbose: !module.parent });\n\n// assume \"not found\" in the error msgs\n// is a 404. this is somewhat silly, but\n// valid, you can do whatever you like, set\n// properties, use instanceof etc.\napp.use(function(err, req, res, next){\n  // treat as 404\n  if (~err.message.indexOf('not found')) return next();\n\n  // log it\n  console.error(err.stack);\n\n  // error page\n  res.status(500).render('5xx');\n});\n\n// assume 404 since no middleware responded\napp.use(function(req, res, next){\n  res.status(404).render('404', { url: req.originalUrl });\n});\n\nif (!module.parent) {\n  app.listen(3000);\n  console.log('\\n  listening on port 3000\\n');\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":2191}]],"length":2191}
