{"ts":1368754357885,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/**\n * Module dependencies.\n */\n\nvar express = require('../../lib/express');\n\n// Path to our public directory\n\nvar pub = __dirname + '/public';\n\n// setup middleware\n\nvar app = express();\napp.use(app.router);\napp.use(express.static(pub));\napp.use(express.errorHandler());\n\n// Optional since express defaults to CWD/views\n\napp.set('views', __dirname + '/views');\n\n// Set our default template engine to \"jade\"\n// which prevents the need for extensions\n// (although you can still mix and match)\napp.set('view engine', 'jade');\n\nfunction User(name, email) {\n  this.name = name;\n  this.email = email;\n}\n\n// Dummy users\nvar users = [\n    new User('tj', 'tj@vision-media.ca')\n  , new User('ciaran', 'ciaranj@gmail.com')\n  , new User('aaron', 'aaron.heckmann+github@gmail.com')\n];\n\napp.get('/', function(req, res){\n  res.render('users', { users: users });\n});\n\napp.listen(3000);\nconsole.log('Express app started on port 3000');\n"]],"start1":0,"start2":0,"length1":0,"length2":920}]],"length":920}
{"contributors":[],"silentsave":false,"ts":1368754447535,"patch":[[{"diffs":[[0,"re('"],[-1,"../../lib/"],[0,"expr"]],"start1":53,"start2":53,"length1":18,"length2":8},{"diffs":[[0,".listen("],[-1,"3000"],[1,"process.env.PORT"],[0,");\nconso"]],"start1":846,"start2":846,"length1":20,"length2":32}]],"length":922,"saved":false}
{"ts":1368755266849,"patch":[[{"diffs":[[-1,"\n/**\n * Module dependencies.\n */\n\nvar express = require('express');\n\n// Path to our public directory\n\nvar pub = __dirname + '/public';\n\n// setup middleware\n\nvar app = express();\napp.use(app.router);\napp.use(express.static(pub));\napp.use(express.errorHandler());\n\n// Optional since express defaults to CWD/views\n"],[1,"var express = require('../..');\n\nvar app = module.exports = express();\n\n// settings\n\n// map .renderFile to \".html\" files\napp.engine('html', require('ejs').renderFile);\n\n// Set our default template engine to \"jade\"\n// which prevents the need for extensions\n// (although you can still mix and match)\napp.set('view engine', 'jade');\n\n// set views for error and 404 pages\napp.set('views', __dirname + '/views');\n\n// define a custom res.message() method\n// which stores messages in the session\napp.response.message = function(msg){\n  // reference `req.session` via the `this.req` reference\n  var sess = this.req.session;\n  // simply add the msg to an array for later\n  sess.messages = sess.messages || [];\n  sess.messages.push(msg);\n  return this;\n};\n\n// log\nif (!module.parent) app.use(express.logger('dev'));\n\n// serve static files\napp.use(express.static(__dirname + '/public'));\n\n// session support\napp.use(express.cookieParser('some secret here'));\napp.use(express.session());\n\n// parse request bodies (req.body)\napp.use(express.bodyParser());\n\n// support _method (PUT in forms etc)"],[0,"\napp."],[1,"u"],[0,"se"],[-1,"t('views', __dirname + '/views');\n\n// Set our default template engine to \"jade\"\n// which prevents the need for extensions\n// (although you can still mix and match)\napp.set('view engine', 'jade');\n\nfunction User(name, email) "],[1,"(express.methodOverride());\n\n// expose the \"messages\" local variable when views are rendered\napp.use(function(req, res, next){\n  var msgs = req.session.messages || [];\n\n  // expose \"messages\" local variable\n  res.locals.messages = msgs;\n\n  // expose \"hasMessages\"\n  res.locals.hasMessages = !! msgs.length;\n\n  /* This is equivalent:\n   res.locals("],[0,"{\n  "],[1," "],[-1,"this.name = name;\n  this.email = email;\n}\n\n// Dummy users\nvar users = [\n    new User('tj', 'tj@vision-media.ca')\n  , new User('ciaran', 'ciaranj@gmail.com')\n  , new User('aaron', 'aaron.heckmann+github@gmail.com')\n];\n\napp.get('/', "],[1,"  messages: msgs,\n     hasMessages: !! msgs.length\n   });\n  */\n\n  next();\n  // empty or \"flush\" the messages so they\n  // don't build up\n  req.session.messages = [];\n});\n\n// load controllers\nrequire('./lib/boot')(app, { verbose: !module.parent });\n\n// assume \"not found\" in the error msgs\n// is a 404. this is somewhat silly, but\n// valid, you can do whatever you like, set\n// properties, use instanceof etc.\napp.use(function(err, req, res, next){\n  // treat as 404\n  if (~err.message.indexOf('not found')) return next();\n\n  // log it\n  console.error(err.stack);\n\n  // error page\n  res.status(500).render('5xx');\n});\n\n// assume 404 since no middleware responded\napp.use("],[0,"func"]],"start1":0,"start2":0,"length1":781,"length2":2115},{"diffs":[[0,"req, res"],[1,", next"],[0,"){\n  res"]],"start1":2120,"start2":2120,"length1":16,"length2":22},{"diffs":[[0,"res."],[1,"status(404)."],[0,"render('"],[-1,"users"],[1,"404"],[0,"', { u"],[-1,"sers: users });\n});\n\n"],[1,"rl: req.originalUrl });\n});\n\nif (!module.parent) {\n  "],[0,"app."]],"start1":2139,"start2":2139,"length1":48,"length2":90},{"diffs":[[0,".PORT);\n"],[1,"  "],[0,"console."]],"start1":2247,"start2":2247,"length1":16,"length2":18},{"diffs":[[0,"og('"],[-1,"Express app started on port 3000"],[1,"\\n  listening on port ' + process.env.PORT + '\\n"],[0,"');\n"],[1,"}\n"]],"start1":2266,"start2":2266,"length1":40,"length2":58}]],"length":2324,"saved":false}
{"ts":1368755397014,"patch":[[{"diffs":[[0,"{\n  "],[-1,"app.listen("],[1,"  var port = "],[0,"proc"]],"start1":2221,"start2":2221,"length1":19,"length2":21},{"diffs":[[0,"env.PORT"],[1," || 3000;\n    app.listen(port"],[0,");\n"],[1,"  "],[0,"  consol"]],"start1":2246,"start2":2246,"length1":19,"length2":50},{"diffs":[[0,"log("],[-1,"'\\n  listening on port ' + process.env.PORT + '\\n');\n}"],[1,"\"Express server listening on: \" + port);\n}\n\n/**\n * Start Web Server\n */\nvar port = process.env.PORT || 3000;\napp.listen(port);\nconsole.log(\"Express server listening on: \" + port);"],[0,"\n"]],"start1":2298,"start2":2298,"length1":59,"length2":184}]],"length":2482,"saved":false}
{"contributors":[],"silentsave":false,"ts":1368755450251,"patch":[[{"diffs":[[0,"\n// "],[-1,"map .renderFile to \".html\" files\napp.engine('html', require('ejs').renderFile"],[1,"Set our default template engine to \"jade\"\n// which prevents the need for extensions\n// (although you can still mix and match)\napp.set('view engine', 'jade'"],[0,");\n\n"]],"start1":84,"start2":84,"length1":85,"length2":163}]],"length":2560,"saved":false}
{"ts":1368755665658,"patch":[[{"diffs":[[0,"\n// "],[-1,"Set our default template engine to \"jade\"\n// which prevents the need for extensions\n// (although you can still mix and match)\napp.set('view engine', 'jade'"],[1,"// map .renderFile to \".html\" files\n// app.engine('html', require('ejs').renderFile"],[0,");\n\n"]],"start1":84,"start2":84,"length1":163,"length2":91},{"diffs":[[0,"4 pages\n"],[1,"//"],[0,"app.set("]],"start1":366,"start2":366,"length1":16,"length2":18},{"diffs":[[0,"public'));\n\n"],[1,"// "],[0,"// session s"]],"start1":874,"start2":874,"length1":24,"length2":27},{"diffs":[[0,"support\n"],[1,"// "],[0,"app.use("]],"start1":900,"start2":900,"length1":16,"length2":19},{"diffs":[[0,"ere'));\n"],[1,"// "],[0,"app.use("]],"start1":954,"start2":954,"length1":16,"length2":19}]],"length":2499,"saved":false}
{"ts":1368755689634,"patch":[[{"diffs":[[0,"re('"],[-1,"../.."],[1,"express"],[0,"');\n"]],"start1":19,"start2":19,"length1":13,"length2":15}]],"length":2501,"saved":false}
{"ts":1368755967832,"patch":[[{"diffs":[[0,"}\n\n/"],[-1,"**\n"],[1,"/ /**\n// "],[0," * S"]],"start1":2362,"start2":2362,"length1":11,"length2":17},{"diffs":[[0," Server\n"],[1,"// "],[0," */\n"],[1,"// "],[0,"var port"]],"start1":2387,"start2":2387,"length1":20,"length2":26},{"diffs":[[0,"| 3000;\n"],[1,"// "],[0,"app.list"]],"start1":2434,"start2":2434,"length1":16,"length2":19},{"diffs":[[0,"(port);\n"],[1,"// "],[0,"console."]],"start1":2455,"start2":2455,"length1":16,"length2":19}]],"length":2519,"saved":false}
